{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mitos\\\\Desktop\\\\volume\\\\frontend\\\\src\\\\components\\\\ResultPage.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport axios from 'axios';\n\n/* \r\nfunction ResultPage() {\r\n\r\n   const navigate = useNavigate()\r\n   const handleUpload = () => {\r\n        navigate('/')\r\n    }\r\n\r\n    const location = useLocation();\r\n    const previousFileUrl = location.state?.vocalPreviousFileUrl;\r\n    const fileUrl = location.state?.vocalFileUrl;\r\n    const imageUrl = location.state?.imageUrl;\r\n    const mixFileUrl = location.state?.mixFileUrl;\r\n    const instFileUrl = location.state?.instFileUrl;\r\n    const mixFilePath = location.state?.mixFilePath;\r\n    const vocalFilePath = location.state?.vocalFilePath;\r\n    const instFilePath = location.state?.instFilePath;\r\n\r\n\r\n    //試し聞きの際、前の再生を停止する\r\n    const stopPreviousPlayback = () => {\r\n      try {\r\n        instSourceRef.current?.stop();\r\n      } catch (e) {}\r\n      try {\r\n        vocalSourceRef.current?.stop();\r\n      } catch (e) {}\r\n    };\r\n\r\n    //音ズレ調整用の変数\r\n    const [offset, setOffset] = useState(0);\r\n    //ボリューム調整用の変数\r\n    const [vocalVolume, setVocalVolume] = useState(1.0);\r\n    const [instVolume, setInstVolume] = useState(1.0);\r\n\r\n    //重複再生を防ぐための変数\r\n    const instSourceRef = useRef(null);\r\n    const vocalSourceRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n\r\n    //再生位置管理の変数\r\n    const [playbackPosition, setPlaybackPosition] = useState(0); // 秒単位\r\n\r\n    //曲の長さを取得する変数\r\n    const [instDuration, setInstDuration] = useState(0);\r\n\r\n    //音ズレ調整用の処理\r\n    const handlePlay = async () => {\r\n      //前の再生を停止\r\n      stopPreviousPlayback(); \r\n\r\n      //AudioContext を再利用（なければ新しく作る）\r\n      const context = audioContextRef.current || new (window.AudioContext || window.webkitAudioContext)();\r\n      audioContextRef.current = context;\r\n\r\n      const fetchAndDecode = async (url) => {\r\n        const res = await fetch(url);\r\n        const arrayBuffer = await res.arrayBuffer();\r\n        return await context.decodeAudioData(arrayBuffer);\r\n      };\r\n\r\n      const instBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${instFileUrl}`);\r\n      const vocalBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${fileUrl}`);\r\n\r\n      //曲の長さを取得\r\n      setInstDuration(instBuffer.duration);\r\n\r\n      //GainNode を使って音量調整\r\n      const instGainNode = context.createGain();\r\n      const vocalGainNode = context.createGain();\r\n      instGainNode.gain.value = instVolume*0.5;       // inst音量\r\n      vocalGainNode.gain.value = vocalVolume*0.5;     // ボーカル音量 なんでかわからないけど音がでかいから両方半分にしてる(相対的には変わってないから機能的には大丈夫だと思う)\r\n\r\n      //Source を useRef に保存し、GainNode 経由で接続\r\n      const instSource = context.createBufferSource();\r\n      instSource.buffer = instBuffer;\r\n      instSource.connect(instGainNode).connect(context.destination);\r\n      instSourceRef.current = instSource;\r\n\r\n      const vocalSource = context.createBufferSource();\r\n      vocalSource.buffer = vocalBuffer;\r\n      vocalSource.connect(vocalGainNode).connect(context.destination);\r\n      vocalSourceRef.current = vocalSource;\r\n\r\n\r\n      //offsetを反映して再生\r\n      const offsetSeconds = offset / 1000;\r\n      if (offsetSeconds >= 0) {\r\n        // offset が正 →  ボーカルのタイミングを遅らせる\r\n        const instStartTime = playbackPosition;\r\n        const vocalStartTime = playbackPosition;  \r\n\r\n        const now = context.currentTime;\r\n        instSource.start(now, instStartTime);\r\n        vocalSource.start(now + offsetSeconds, vocalStartTime);\r\n      } else {\r\n\r\n        // offset が負 → instのタイミングを遅らせる (ボーカルを前にずらさないのは再生位置を負の値にしないため)\r\n        const instStartTime = playbackPosition; \r\n        const vocalStartTime = playbackPosition;  \r\n       \r\n        const now = context.currentTime;\r\n        instSource.start(now + Math.abs(offsetSeconds), instStartTime);\r\n        vocalSource.start(now, vocalStartTime);\r\n      }\r\n\r\n    };\r\n\r\n     const formData = new FormData();\r\n     formData.append(\"output_inst_path\",instFilePath)\r\n     formData.append(\"output_vocal_path\",vocalFilePath)\r\n     formData.append(\"output_mix_path\",mixFilePath)\r\n     formData.append(\"offset_ms\", offset)\r\n     formData.append(\"vocal_gain\", vocalVolume)\r\n     formData.append(\"inst_gain\", instVolume)\r\n\r\n\r\n    const handleConfirmVolumeAndOffset = async () => {\r\n      try {\r\n        const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/apply_mix`, formData);\r\n        alert(\"音量バランスとオフセットが確定されました\");\r\n        window.location.reload();\r\n      } catch (error) {\r\n        alert(\"送信に失敗しました\");\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n\r\n\r\n    console.log(\"処理前:\", previousFileUrl)\r\n    console.log(\"処理後:\", fileUrl)\r\n    console.log(\"MIX:\", mixFileUrl)\r\n\r\n    return (\r\n      <div>\r\n        <h1>処理完了</h1>\r\n        <label>処理前\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${previousFileUrl}`} controls/>\r\n        </label>\r\n        <label>処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${fileUrl}`} controls/>   \r\n        </label>\r\n        \r\n          <img\r\n            src={`${process.env.REACT_APP_BASE_URL}${imageUrl}`}\r\n            alt=\"processed waveform\"\r\n            style={{ maxWidth: '100%', height: 'auto' }}\r\n          />\r\n\r\n        <label>MIX処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${mixFileUrl}`} controls/>\r\n        </label>\r\n\r\n        <div>\r\n          <h2>音量バランス調整</h2>\r\n\r\n            <label>inst音量: {instVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={instVolume}\r\n              onChange={(e) => setInstVolume(parseFloat(e.target.value))}\r\n            />\r\n\r\n            <label>ボーカル音量: {vocalVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={vocalVolume}\r\n              onChange={(e) => setVocalVolume(parseFloat(e.target.value))}\r\n            />\r\n        </div>\r\n\r\n        <div>\r\n          <h2>音ズレ確認・調整</h2>\r\n\r\n          <label>ボーカルのズレ調整（ミリ秒）: {offset}ms</label>\r\n          <input\r\n            type=\"range\"\r\n            min={-1000}\r\n            max={1000}\r\n            step={10}\r\n            value={offset}\r\n            onChange={(e) => setOffset(Number(e.target.value))}\r\n          />\r\n\r\n          <button onClick={handleConfirmVolumeAndOffset}>この音量,ズレで確定</button>\r\n        </div>\r\n\r\n        <label>再生位置（秒）: {playbackPosition}s</label>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={instDuration}\r\n          step=\"1\"\r\n          value={playbackPosition}\r\n          onChange={(e) => setPlaybackPosition(Number(e.target.value))}\r\n        />\r\n\r\n        <button onClick={handlePlay}>再生して確認</button>\r\n        <button onClick={stopPreviousPlayback}>再生停止</button>\r\n\r\n        <button onClick={handleUpload}>アップロード画面へ</button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ResultPage;\r\n  */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultPage() {\n  _s();\n  const navigate = useNavigate();\n  const handleUpload = () => {\n    navigate('/');\n  };\n  const location = useLocation();\n  const [currentState, setCurrentState] = useState(location.state || {});\n\n  // 現在表示中のファイルURL（更新される可能性がある）\n  const [displayUrls, setDisplayUrls] = useState({\n    previousFileUrl: currentState.vocalPreviousFileUrl,\n    fileUrl: currentState.vocalFileUrl,\n    imageUrl: currentState.imageUrl,\n    mixFileUrl: currentState.mixFileUrl,\n    instFileUrl: currentState.instFileUrl\n  });\n  const mixFilePath = currentState.mixFilePath;\n  const vocalFilePath = currentState.vocalFilePath;\n  const instFilePath = currentState.instFilePath;\n\n  //試し聞きの際、前の再生を停止する\n  const stopPreviousPlayback = () => {\n    try {\n      var _instSourceRef$curren;\n      (_instSourceRef$curren = instSourceRef.current) === null || _instSourceRef$curren === void 0 ? void 0 : _instSourceRef$curren.stop();\n    } catch (e) {}\n    try {\n      var _vocalSourceRef$curre;\n      (_vocalSourceRef$curre = vocalSourceRef.current) === null || _vocalSourceRef$curre === void 0 ? void 0 : _vocalSourceRef$curre.stop();\n    } catch (e) {}\n  };\n\n  //音ズレ調整用の変数\n  const [offset, setOffset] = useState(0);\n  //ボリューム調整用の変数\n  const [vocalVolume, setVocalVolume] = useState(1.0);\n  const [instVolume, setInstVolume] = useState(1.0);\n\n  //重複再生を防ぐための変数\n  const instSourceRef = useRef(null);\n  const vocalSourceRef = useRef(null);\n  const audioContextRef = useRef(null);\n\n  //再生位置管理の変数\n  const [playbackPosition, setPlaybackPosition] = useState(0); // 秒単位\n\n  //曲の長さを取得する変数\n  const [instDuration, setInstDuration] = useState(0);\n\n  // 処理中状態の管理\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  //音ズレ調整用の処理\n  const handlePlay = async () => {\n    //前の再生を停止\n    stopPreviousPlayback();\n\n    //AudioContext を再利用（なければ新しく作る）\n    const context = audioContextRef.current || new (window.AudioContext || window.webkitAudioContext)();\n    audioContextRef.current = context;\n    const fetchAndDecode = async url => {\n      const res = await fetch(url);\n      const arrayBuffer = await res.arrayBuffer();\n      return await context.decodeAudioData(arrayBuffer);\n    };\n    const instBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${displayUrls.instFileUrl}`);\n    const vocalBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${displayUrls.fileUrl}`);\n\n    //曲の長さを取得\n    setInstDuration(instBuffer.duration);\n\n    //GainNode を使って音量調整\n    const instGainNode = context.createGain();\n    const vocalGainNode = context.createGain();\n    instGainNode.gain.value = instVolume * 0.5; // inst音量\n    vocalGainNode.gain.value = vocalVolume * 0.5; // ボーカル音量 なんでかわからないけど音がでかいから両方半分にしてる(相対的には変わってないから機能的には大丈夫だと思う)\n\n    //Source を useRef に保存し、GainNode 経由で接続\n    const instSource = context.createBufferSource();\n    instSource.buffer = instBuffer;\n    instSource.connect(instGainNode).connect(context.destination);\n    instSourceRef.current = instSource;\n    const vocalSource = context.createBufferSource();\n    vocalSource.buffer = vocalBuffer;\n    vocalSource.connect(vocalGainNode).connect(context.destination);\n    vocalSourceRef.current = vocalSource;\n\n    //offsetを反映して再生\n    const offsetSeconds = offset / 1000;\n    if (offsetSeconds >= 0) {\n      // offset が正 →  ボーカルのタイミングを遅らせる\n      const instStartTime = playbackPosition;\n      const vocalStartTime = playbackPosition;\n      const now = context.currentTime;\n      instSource.start(now, instStartTime);\n      vocalSource.start(now + offsetSeconds, vocalStartTime);\n    } else {\n      // offset が負 → instのタイミングを遅らせる (ボーカルを前にずらさないのは再生位置を負の値にしないため)\n      const instStartTime = playbackPosition;\n      const vocalStartTime = playbackPosition;\n      const now = context.currentTime;\n      instSource.start(now + Math.abs(offsetSeconds), instStartTime);\n      vocalSource.start(now, vocalStartTime);\n    }\n  };\n  const handleConfirmVolumeAndOffset = async () => {\n    setIsProcessing(true);\n    const formData = new FormData();\n    formData.append(\"output_inst_path\", instFilePath);\n    formData.append(\"output_vocal_path\", vocalFilePath);\n    formData.append(\"output_mix_path\", mixFilePath);\n    formData.append(\"offset_ms\", offset);\n    formData.append(\"vocal_gain\", vocalVolume);\n    formData.append(\"inst_gain\", instVolume);\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/apply_mix`, formData);\n\n      // ファイルが同じパスで上書きされるため、キャッシュを回避するためにタイムスタンプを追加\n      const timestamp = new Date().getTime();\n\n      // 元のURLからタイムスタンプを除去してから新しいタイムスタンプを追加\n      const cleanUrl = url => url.split('?')[0];\n      setDisplayUrls(prev => ({\n        ...prev,\n        mixFileUrl: `${cleanUrl(prev.mixFileUrl)}?t=${timestamp}`,\n        fileUrl: `${cleanUrl(prev.fileUrl)}?t=${timestamp}`,\n        instFileUrl: `${cleanUrl(prev.instFileUrl)}?t=${timestamp}`,\n        imageUrl: `${cleanUrl(prev.imageUrl)}?t=${timestamp}`\n      }));\n      alert(\"音量バランスとオフセットが確定されました\");\n\n      // 再生を停止\n      stopPreviousPlayback();\n\n      // 調整値をリセット\n      setOffset(0);\n      setVocalVolume(1.0);\n      setInstVolume(1.0);\n      setPlaybackPosition(0);\n    } catch (error) {\n      alert(\"送信に失敗しました\");\n      console.error(error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  console.log(\"処理前:\", displayUrls.previousFileUrl);\n  console.log(\"処理後:\", displayUrls.fileUrl);\n  console.log(\"MIX:\", displayUrls.mixFileUrl);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u51E6\\u7406\\u5B8C\\u4E86\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u51E6\\u7406\\u524D\", /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: `${process.env.REACT_APP_BASE_URL}${displayUrls.previousFileUrl}`,\n        controls: true\n      }, displayUrls.previousFileUrl, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u51E6\\u7406\\u5F8C\", /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: `${process.env.REACT_APP_BASE_URL}${displayUrls.fileUrl}`,\n        controls: true\n      }, displayUrls.fileUrl, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${process.env.REACT_APP_BASE_URL}${displayUrls.imageUrl}`,\n      alt: \"processed waveform\",\n      style: {\n        maxWidth: '100%',\n        height: 'auto'\n      }\n    }, displayUrls.imageUrl, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"MIX\\u51E6\\u7406\\u5F8C\", /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: `${process.env.REACT_APP_BASE_URL}${displayUrls.mixFileUrl}`,\n        controls: true\n      }, displayUrls.mixFileUrl, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u97F3\\u91CF\\u30D0\\u30E9\\u30F3\\u30B9\\u8ABF\\u6574\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"inst\\u97F3\\u91CF: \", instVolume.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"2\",\n        step: \"0.01\",\n        value: instVolume,\n        onChange: e => setInstVolume(parseFloat(e.target.value)),\n        disabled: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u30DC\\u30FC\\u30AB\\u30EB\\u97F3\\u91CF: \", vocalVolume.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"2\",\n        step: \"0.01\",\n        value: vocalVolume,\n        onChange: e => setVocalVolume(parseFloat(e.target.value)),\n        disabled: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u97F3\\u30BA\\u30EC\\u78BA\\u8A8D\\u30FB\\u8ABF\\u6574\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u30DC\\u30FC\\u30AB\\u30EB\\u306E\\u30BA\\u30EC\\u8ABF\\u6574\\uFF08\\u30DF\\u30EA\\u79D2\\uFF09: \", offset, \"ms\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: -1000,\n        max: 1000,\n        step: 10,\n        value: offset,\n        onChange: e => setOffset(Number(e.target.value)),\n        disabled: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirmVolumeAndOffset,\n        disabled: isProcessing,\n        children: isProcessing ? \"処理中...\" : \"この音量,ズレで確定\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u518D\\u751F\\u4F4D\\u7F6E\\uFF08\\u79D2\\uFF09: \", playbackPosition, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: instDuration,\n      step: \"1\",\n      value: playbackPosition,\n      onChange: e => setPlaybackPosition(Number(e.target.value)),\n      disabled: isProcessing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlay,\n      disabled: isProcessing,\n      children: \"\\u518D\\u751F\\u3057\\u3066\\u78BA\\u8A8D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopPreviousPlayback,\n      disabled: isProcessing,\n      children: \"\\u518D\\u751F\\u505C\\u6B62\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"\\u30A2\\u30C3\\u30D7\\u30ED\\u30FC\\u30C9\\u753B\\u9762\\u3078\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 7\n  }, this);\n}\n_s(ResultPage, \"0cJ2RSQnEjjsBl9OVZpEgrtZU+k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ResultPage;\nexport default ResultPage;\nvar _c;\n$RefreshReg$(_c, \"ResultPage\");","map":{"version":3,"names":["React","useRef","useLocation","useNavigate","useState","axios","jsxDEV","_jsxDEV","ResultPage","_s","navigate","handleUpload","location","currentState","setCurrentState","state","displayUrls","setDisplayUrls","previousFileUrl","vocalPreviousFileUrl","fileUrl","vocalFileUrl","imageUrl","mixFileUrl","instFileUrl","mixFilePath","vocalFilePath","instFilePath","stopPreviousPlayback","_instSourceRef$curren","instSourceRef","current","stop","e","_vocalSourceRef$curre","vocalSourceRef","offset","setOffset","vocalVolume","setVocalVolume","instVolume","setInstVolume","audioContextRef","playbackPosition","setPlaybackPosition","instDuration","setInstDuration","isProcessing","setIsProcessing","handlePlay","context","window","AudioContext","webkitAudioContext","fetchAndDecode","url","res","fetch","arrayBuffer","decodeAudioData","instBuffer","process","env","REACT_APP_BASE_URL","vocalBuffer","duration","instGainNode","createGain","vocalGainNode","gain","value","instSource","createBufferSource","buffer","connect","destination","vocalSource","offsetSeconds","instStartTime","vocalStartTime","now","currentTime","start","Math","abs","handleConfirmVolumeAndOffset","formData","FormData","append","response","post","timestamp","Date","getTime","cleanUrl","split","prev","alert","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","alt","style","maxWidth","height","toFixed","type","min","max","step","onChange","parseFloat","target","disabled","Number","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mitos/Desktop/volume/frontend/src/components/ResultPage.js"],"sourcesContent":["import React, { useRef} from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useNavigate} from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n/* \r\nfunction ResultPage() {\r\n\r\n   const navigate = useNavigate()\r\n   const handleUpload = () => {\r\n        navigate('/')\r\n    }\r\n\r\n    const location = useLocation();\r\n    const previousFileUrl = location.state?.vocalPreviousFileUrl;\r\n    const fileUrl = location.state?.vocalFileUrl;\r\n    const imageUrl = location.state?.imageUrl;\r\n    const mixFileUrl = location.state?.mixFileUrl;\r\n    const instFileUrl = location.state?.instFileUrl;\r\n    const mixFilePath = location.state?.mixFilePath;\r\n    const vocalFilePath = location.state?.vocalFilePath;\r\n    const instFilePath = location.state?.instFilePath;\r\n\r\n\r\n    //試し聞きの際、前の再生を停止する\r\n    const stopPreviousPlayback = () => {\r\n      try {\r\n        instSourceRef.current?.stop();\r\n      } catch (e) {}\r\n      try {\r\n        vocalSourceRef.current?.stop();\r\n      } catch (e) {}\r\n    };\r\n\r\n    //音ズレ調整用の変数\r\n    const [offset, setOffset] = useState(0);\r\n    //ボリューム調整用の変数\r\n    const [vocalVolume, setVocalVolume] = useState(1.0);\r\n    const [instVolume, setInstVolume] = useState(1.0);\r\n\r\n    //重複再生を防ぐための変数\r\n    const instSourceRef = useRef(null);\r\n    const vocalSourceRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n\r\n    //再生位置管理の変数\r\n    const [playbackPosition, setPlaybackPosition] = useState(0); // 秒単位\r\n\r\n    //曲の長さを取得する変数\r\n    const [instDuration, setInstDuration] = useState(0);\r\n\r\n    //音ズレ調整用の処理\r\n    const handlePlay = async () => {\r\n      //前の再生を停止\r\n      stopPreviousPlayback(); \r\n\r\n      //AudioContext を再利用（なければ新しく作る）\r\n      const context = audioContextRef.current || new (window.AudioContext || window.webkitAudioContext)();\r\n      audioContextRef.current = context;\r\n\r\n      const fetchAndDecode = async (url) => {\r\n        const res = await fetch(url);\r\n        const arrayBuffer = await res.arrayBuffer();\r\n        return await context.decodeAudioData(arrayBuffer);\r\n      };\r\n\r\n      const instBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${instFileUrl}`);\r\n      const vocalBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${fileUrl}`);\r\n\r\n      //曲の長さを取得\r\n      setInstDuration(instBuffer.duration);\r\n\r\n      //GainNode を使って音量調整\r\n      const instGainNode = context.createGain();\r\n      const vocalGainNode = context.createGain();\r\n      instGainNode.gain.value = instVolume*0.5;       // inst音量\r\n      vocalGainNode.gain.value = vocalVolume*0.5;     // ボーカル音量 なんでかわからないけど音がでかいから両方半分にしてる(相対的には変わってないから機能的には大丈夫だと思う)\r\n\r\n      //Source を useRef に保存し、GainNode 経由で接続\r\n      const instSource = context.createBufferSource();\r\n      instSource.buffer = instBuffer;\r\n      instSource.connect(instGainNode).connect(context.destination);\r\n      instSourceRef.current = instSource;\r\n\r\n      const vocalSource = context.createBufferSource();\r\n      vocalSource.buffer = vocalBuffer;\r\n      vocalSource.connect(vocalGainNode).connect(context.destination);\r\n      vocalSourceRef.current = vocalSource;\r\n\r\n\r\n      //offsetを反映して再生\r\n      const offsetSeconds = offset / 1000;\r\n      if (offsetSeconds >= 0) {\r\n        // offset が正 →  ボーカルのタイミングを遅らせる\r\n        const instStartTime = playbackPosition;\r\n        const vocalStartTime = playbackPosition;  \r\n\r\n        const now = context.currentTime;\r\n        instSource.start(now, instStartTime);\r\n        vocalSource.start(now + offsetSeconds, vocalStartTime);\r\n      } else {\r\n\r\n        // offset が負 → instのタイミングを遅らせる (ボーカルを前にずらさないのは再生位置を負の値にしないため)\r\n        const instStartTime = playbackPosition; \r\n        const vocalStartTime = playbackPosition;  \r\n       \r\n        const now = context.currentTime;\r\n        instSource.start(now + Math.abs(offsetSeconds), instStartTime);\r\n        vocalSource.start(now, vocalStartTime);\r\n      }\r\n\r\n    };\r\n\r\n     const formData = new FormData();\r\n     formData.append(\"output_inst_path\",instFilePath)\r\n     formData.append(\"output_vocal_path\",vocalFilePath)\r\n     formData.append(\"output_mix_path\",mixFilePath)\r\n     formData.append(\"offset_ms\", offset)\r\n     formData.append(\"vocal_gain\", vocalVolume)\r\n     formData.append(\"inst_gain\", instVolume)\r\n\r\n\r\n    const handleConfirmVolumeAndOffset = async () => {\r\n      try {\r\n        const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/apply_mix`, formData);\r\n        alert(\"音量バランスとオフセットが確定されました\");\r\n        window.location.reload();\r\n      } catch (error) {\r\n        alert(\"送信に失敗しました\");\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n\r\n\r\n    console.log(\"処理前:\", previousFileUrl)\r\n    console.log(\"処理後:\", fileUrl)\r\n    console.log(\"MIX:\", mixFileUrl)\r\n\r\n    return (\r\n      <div>\r\n        <h1>処理完了</h1>\r\n        <label>処理前\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${previousFileUrl}`} controls/>\r\n        </label>\r\n        <label>処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${fileUrl}`} controls/>   \r\n        </label>\r\n        \r\n          <img\r\n            src={`${process.env.REACT_APP_BASE_URL}${imageUrl}`}\r\n            alt=\"processed waveform\"\r\n            style={{ maxWidth: '100%', height: 'auto' }}\r\n          />\r\n\r\n        <label>MIX処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${mixFileUrl}`} controls/>\r\n        </label>\r\n\r\n        <div>\r\n          <h2>音量バランス調整</h2>\r\n\r\n            <label>inst音量: {instVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={instVolume}\r\n              onChange={(e) => setInstVolume(parseFloat(e.target.value))}\r\n            />\r\n\r\n            <label>ボーカル音量: {vocalVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={vocalVolume}\r\n              onChange={(e) => setVocalVolume(parseFloat(e.target.value))}\r\n            />\r\n        </div>\r\n\r\n        <div>\r\n          <h2>音ズレ確認・調整</h2>\r\n\r\n          <label>ボーカルのズレ調整（ミリ秒）: {offset}ms</label>\r\n          <input\r\n            type=\"range\"\r\n            min={-1000}\r\n            max={1000}\r\n            step={10}\r\n            value={offset}\r\n            onChange={(e) => setOffset(Number(e.target.value))}\r\n          />\r\n\r\n          <button onClick={handleConfirmVolumeAndOffset}>この音量,ズレで確定</button>\r\n        </div>\r\n\r\n        <label>再生位置（秒）: {playbackPosition}s</label>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={instDuration}\r\n          step=\"1\"\r\n          value={playbackPosition}\r\n          onChange={(e) => setPlaybackPosition(Number(e.target.value))}\r\n        />\r\n\r\n        <button onClick={handlePlay}>再生して確認</button>\r\n        <button onClick={stopPreviousPlayback}>再生停止</button>\r\n\r\n        <button onClick={handleUpload}>アップロード画面へ</button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ResultPage;\r\n  */\r\n\r\n\r\nfunction ResultPage() {\r\n\r\n   const navigate = useNavigate()\r\n   const handleUpload = () => {\r\n        navigate('/')\r\n    }\r\n\r\n    const location = useLocation();\r\n    const [currentState, setCurrentState] = useState(location.state || {});\r\n    \r\n    // 現在表示中のファイルURL（更新される可能性がある）\r\n    const [displayUrls, setDisplayUrls] = useState({\r\n        previousFileUrl: currentState.vocalPreviousFileUrl,\r\n        fileUrl: currentState.vocalFileUrl,\r\n        imageUrl: currentState.imageUrl,\r\n        mixFileUrl: currentState.mixFileUrl,\r\n        instFileUrl: currentState.instFileUrl\r\n    });\r\n\r\n    const mixFilePath = currentState.mixFilePath;\r\n    const vocalFilePath = currentState.vocalFilePath;\r\n    const instFilePath = currentState.instFilePath;\r\n\r\n    //試し聞きの際、前の再生を停止する\r\n    const stopPreviousPlayback = () => {\r\n      try {\r\n        instSourceRef.current?.stop();\r\n      } catch (e) {}\r\n      try {\r\n        vocalSourceRef.current?.stop();\r\n      } catch (e) {}\r\n    };\r\n\r\n    //音ズレ調整用の変数\r\n    const [offset, setOffset] = useState(0);\r\n    //ボリューム調整用の変数\r\n    const [vocalVolume, setVocalVolume] = useState(1.0);\r\n    const [instVolume, setInstVolume] = useState(1.0);\r\n\r\n    //重複再生を防ぐための変数\r\n    const instSourceRef = useRef(null);\r\n    const vocalSourceRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n\r\n    //再生位置管理の変数\r\n    const [playbackPosition, setPlaybackPosition] = useState(0); // 秒単位\r\n\r\n    //曲の長さを取得する変数\r\n    const [instDuration, setInstDuration] = useState(0);\r\n\r\n    // 処理中状態の管理\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n    //音ズレ調整用の処理\r\n    const handlePlay = async () => {\r\n      //前の再生を停止\r\n      stopPreviousPlayback(); \r\n\r\n      //AudioContext を再利用（なければ新しく作る）\r\n      const context = audioContextRef.current || new (window.AudioContext || window.webkitAudioContext)();\r\n      audioContextRef.current = context;\r\n\r\n      const fetchAndDecode = async (url) => {\r\n        const res = await fetch(url);\r\n        const arrayBuffer = await res.arrayBuffer();\r\n        return await context.decodeAudioData(arrayBuffer);\r\n      };\r\n\r\n      const instBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${displayUrls.instFileUrl}`);\r\n      const vocalBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${displayUrls.fileUrl}`);\r\n\r\n      //曲の長さを取得\r\n      setInstDuration(instBuffer.duration);\r\n\r\n      //GainNode を使って音量調整\r\n      const instGainNode = context.createGain();\r\n      const vocalGainNode = context.createGain();\r\n      instGainNode.gain.value = instVolume*0.5;       // inst音量\r\n      vocalGainNode.gain.value = vocalVolume*0.5;     // ボーカル音量 なんでかわからないけど音がでかいから両方半分にしてる(相対的には変わってないから機能的には大丈夫だと思う)\r\n\r\n      //Source を useRef に保存し、GainNode 経由で接続\r\n      const instSource = context.createBufferSource();\r\n      instSource.buffer = instBuffer;\r\n      instSource.connect(instGainNode).connect(context.destination);\r\n      instSourceRef.current = instSource;\r\n\r\n      const vocalSource = context.createBufferSource();\r\n      vocalSource.buffer = vocalBuffer;\r\n      vocalSource.connect(vocalGainNode).connect(context.destination);\r\n      vocalSourceRef.current = vocalSource;\r\n\r\n      //offsetを反映して再生\r\n      const offsetSeconds = offset / 1000;\r\n      if (offsetSeconds >= 0) {\r\n        // offset が正 →  ボーカルのタイミングを遅らせる\r\n        const instStartTime = playbackPosition;\r\n        const vocalStartTime = playbackPosition;  \r\n\r\n        const now = context.currentTime;\r\n        instSource.start(now, instStartTime);\r\n        vocalSource.start(now + offsetSeconds, vocalStartTime);\r\n      } else {\r\n        // offset が負 → instのタイミングを遅らせる (ボーカルを前にずらさないのは再生位置を負の値にしないため)\r\n        const instStartTime = playbackPosition; \r\n        const vocalStartTime = playbackPosition;  \r\n       \r\n        const now = context.currentTime;\r\n        instSource.start(now + Math.abs(offsetSeconds), instStartTime);\r\n        vocalSource.start(now, vocalStartTime);\r\n      }\r\n    };\r\n\r\n    const handleConfirmVolumeAndOffset = async () => {\r\n      setIsProcessing(true);\r\n      \r\n      const formData = new FormData();\r\n      formData.append(\"output_inst_path\", instFilePath);\r\n      formData.append(\"output_vocal_path\", vocalFilePath);\r\n      formData.append(\"output_mix_path\", mixFilePath);\r\n      formData.append(\"offset_ms\", offset);\r\n      formData.append(\"vocal_gain\", vocalVolume);\r\n      formData.append(\"inst_gain\", instVolume);\r\n\r\n      try {\r\n        const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/apply_mix`, formData);\r\n        \r\n        // ファイルが同じパスで上書きされるため、キャッシュを回避するためにタイムスタンプを追加\r\n        const timestamp = new Date().getTime();\r\n        \r\n        // 元のURLからタイムスタンプを除去してから新しいタイムスタンプを追加\r\n        const cleanUrl = (url) => url.split('?')[0];\r\n        \r\n        setDisplayUrls(prev => ({\r\n          ...prev,\r\n          mixFileUrl: `${cleanUrl(prev.mixFileUrl)}?t=${timestamp}`,\r\n          fileUrl: `${cleanUrl(prev.fileUrl)}?t=${timestamp}`,\r\n          instFileUrl: `${cleanUrl(prev.instFileUrl)}?t=${timestamp}`,\r\n          imageUrl: `${cleanUrl(prev.imageUrl)}?t=${timestamp}`\r\n        }));\r\n        \r\n        alert(\"音量バランスとオフセットが確定されました\");\r\n        \r\n        // 再生を停止\r\n        stopPreviousPlayback();\r\n        \r\n        // 調整値をリセット\r\n        setOffset(0);\r\n        setVocalVolume(1.0);\r\n        setInstVolume(1.0);\r\n        setPlaybackPosition(0);\r\n        \r\n      } catch (error) {\r\n        alert(\"送信に失敗しました\");\r\n        console.error(error);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    };\r\n\r\n    console.log(\"処理前:\", displayUrls.previousFileUrl)\r\n    console.log(\"処理後:\", displayUrls.fileUrl)\r\n    console.log(\"MIX:\", displayUrls.mixFileUrl)\r\n\r\n    return (\r\n      <div>\r\n        <h1>処理完了</h1>\r\n        <label>処理前\r\n          <audio \r\n            src={`${process.env.REACT_APP_BASE_URL}${displayUrls.previousFileUrl}`} \r\n            controls\r\n            key={displayUrls.previousFileUrl} // キャッシュ回避のため\r\n          />\r\n        </label>\r\n        <label>処理後\r\n          <audio \r\n            src={`${process.env.REACT_APP_BASE_URL}${displayUrls.fileUrl}`} \r\n            controls\r\n            key={displayUrls.fileUrl} // キャッシュ回避のため\r\n          />   \r\n        </label>\r\n        \r\n        <img\r\n          src={`${process.env.REACT_APP_BASE_URL}${displayUrls.imageUrl}`}\r\n          alt=\"processed waveform\"\r\n          style={{ maxWidth: '100%', height: 'auto' }}\r\n          key={displayUrls.imageUrl} // キャッシュ回避のため\r\n        />\r\n\r\n        <label>MIX処理後\r\n          <audio \r\n            src={`${process.env.REACT_APP_BASE_URL}${displayUrls.mixFileUrl}`} \r\n            controls\r\n            key={displayUrls.mixFileUrl} // キャッシュ回避のため\r\n          />\r\n        </label>\r\n\r\n        <div>\r\n          <h2>音量バランス調整</h2>\r\n\r\n            <label>inst音量: {instVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={instVolume}\r\n              onChange={(e) => setInstVolume(parseFloat(e.target.value))}\r\n              disabled={isProcessing}\r\n            />\r\n\r\n            <label>ボーカル音量: {vocalVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={vocalVolume}\r\n              onChange={(e) => setVocalVolume(parseFloat(e.target.value))}\r\n              disabled={isProcessing}\r\n            />\r\n        </div>\r\n\r\n        <div>\r\n          <h2>音ズレ確認・調整</h2>\r\n\r\n          <label>ボーカルのズレ調整（ミリ秒）: {offset}ms</label>\r\n          <input\r\n            type=\"range\"\r\n            min={-1000}\r\n            max={1000}\r\n            step={10}\r\n            value={offset}\r\n            onChange={(e) => setOffset(Number(e.target.value))}\r\n            disabled={isProcessing}\r\n          />\r\n\r\n          <button \r\n            onClick={handleConfirmVolumeAndOffset}\r\n            disabled={isProcessing}\r\n          >\r\n            {isProcessing ? \"処理中...\" : \"この音量,ズレで確定\"}\r\n          </button>\r\n        </div>\r\n\r\n        <label>再生位置（秒）: {playbackPosition}s</label>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={instDuration}\r\n          step=\"1\"\r\n          value={playbackPosition}\r\n          onChange={(e) => setPlaybackPosition(Number(e.target.value))}\r\n          disabled={isProcessing}\r\n        />\r\n\r\n        <button onClick={handlePlay} disabled={isProcessing}>再生して確認</button>\r\n        <button onClick={stopPreviousPlayback} disabled={isProcessing}>再生停止</button>\r\n\r\n        <button onClick={handleUpload}>アップロード画面へ</button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ResultPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}