{"ast":null,"code":"import React, { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport axios from 'axios';\n\n/* \r\nfunction ResultPage() {\r\n\r\n   const navigate = useNavigate()\r\n   const handleUpload = () => {\r\n        navigate('/')\r\n    }\r\n\r\n    const location = useLocation();\r\n    const previousFileUrl = location.state?.vocalPreviousFileUrl;\r\n    const fileUrl = location.state?.vocalFileUrl;\r\n    const imageUrl = location.state?.imageUrl;\r\n    const mixFileUrl = location.state?.mixFileUrl;\r\n    const instFileUrl = location.state?.instFileUrl;\r\n    const mixFilePath = location.state?.mixFilePath;\r\n    const vocalFilePath = location.state?.vocalFilePath;\r\n    const instFilePath = location.state?.instFilePath;\r\n\r\n\r\n    //試し聞きの際、前の再生を停止する\r\n    const stopPreviousPlayback = () => {\r\n      try {\r\n        instSourceRef.current?.stop();\r\n      } catch (e) {}\r\n      try {\r\n        vocalSourceRef.current?.stop();\r\n      } catch (e) {}\r\n    };\r\n\r\n    //音ズレ調整用の変数\r\n    const [offset, setOffset] = useState(0);\r\n    //ボリューム調整用の変数\r\n    const [vocalVolume, setVocalVolume] = useState(1.0);\r\n    const [instVolume, setInstVolume] = useState(1.0);\r\n\r\n    //重複再生を防ぐための変数\r\n    const instSourceRef = useRef(null);\r\n    const vocalSourceRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n\r\n    //再生位置管理の変数\r\n    const [playbackPosition, setPlaybackPosition] = useState(0); // 秒単位\r\n\r\n    //曲の長さを取得する変数\r\n    const [instDuration, setInstDuration] = useState(0);\r\n\r\n    //音ズレ調整用の処理\r\n    const handlePlay = async () => {\r\n      //前の再生を停止\r\n      stopPreviousPlayback(); \r\n\r\n      //AudioContext を再利用（なければ新しく作る）\r\n      const context = audioContextRef.current || new (window.AudioContext || window.webkitAudioContext)();\r\n      audioContextRef.current = context;\r\n\r\n      const fetchAndDecode = async (url) => {\r\n        const res = await fetch(url);\r\n        const arrayBuffer = await res.arrayBuffer();\r\n        return await context.decodeAudioData(arrayBuffer);\r\n      };\r\n\r\n      const instBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${instFileUrl}`);\r\n      const vocalBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${fileUrl}`);\r\n\r\n      //曲の長さを取得\r\n      setInstDuration(instBuffer.duration);\r\n\r\n      //GainNode を使って音量調整\r\n      const instGainNode = context.createGain();\r\n      const vocalGainNode = context.createGain();\r\n      instGainNode.gain.value = instVolume*0.5;       // inst音量\r\n      vocalGainNode.gain.value = vocalVolume*0.5;     // ボーカル音量 なんでかわからないけど音がでかいから両方半分にしてる(相対的には変わってないから機能的には大丈夫だと思う)\r\n\r\n      //Source を useRef に保存し、GainNode 経由で接続\r\n      const instSource = context.createBufferSource();\r\n      instSource.buffer = instBuffer;\r\n      instSource.connect(instGainNode).connect(context.destination);\r\n      instSourceRef.current = instSource;\r\n\r\n      const vocalSource = context.createBufferSource();\r\n      vocalSource.buffer = vocalBuffer;\r\n      vocalSource.connect(vocalGainNode).connect(context.destination);\r\n      vocalSourceRef.current = vocalSource;\r\n\r\n\r\n      //offsetを反映して再生\r\n      const offsetSeconds = offset / 1000;\r\n      if (offsetSeconds >= 0) {\r\n        // offset が正 →  ボーカルのタイミングを遅らせる\r\n        const instStartTime = playbackPosition;\r\n        const vocalStartTime = playbackPosition;  \r\n\r\n        const now = context.currentTime;\r\n        instSource.start(now, instStartTime);\r\n        vocalSource.start(now + offsetSeconds, vocalStartTime);\r\n      } else {\r\n\r\n        // offset が負 → instのタイミングを遅らせる (ボーカルを前にずらさないのは再生位置を負の値にしないため)\r\n        const instStartTime = playbackPosition; \r\n        const vocalStartTime = playbackPosition;  \r\n       \r\n        const now = context.currentTime;\r\n        instSource.start(now + Math.abs(offsetSeconds), instStartTime);\r\n        vocalSource.start(now, vocalStartTime);\r\n      }\r\n\r\n    };\r\n\r\n     const formData = new FormData();\r\n     formData.append(\"output_inst_path\",instFilePath)\r\n     formData.append(\"output_vocal_path\",vocalFilePath)\r\n     formData.append(\"output_mix_path\",mixFilePath)\r\n     formData.append(\"offset_ms\", offset)\r\n     formData.append(\"vocal_gain\", vocalVolume)\r\n     formData.append(\"inst_gain\", instVolume)\r\n\r\n\r\n    const handleConfirmVolumeAndOffset = async () => {\r\n      try {\r\n        const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/apply_mix`, formData);\r\n        alert(\"音量バランスとオフセットが確定されました\");\r\n        window.location.reload();\r\n      } catch (error) {\r\n        alert(\"送信に失敗しました\");\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n\r\n\r\n    console.log(\"処理前:\", previousFileUrl)\r\n    console.log(\"処理後:\", fileUrl)\r\n    console.log(\"MIX:\", mixFileUrl)\r\n\r\n    return (\r\n      <div>\r\n        <h1>処理完了</h1>\r\n        <label>処理前\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${previousFileUrl}`} controls/>\r\n        </label>\r\n        <label>処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${fileUrl}`} controls/>   \r\n        </label>\r\n        \r\n          <img\r\n            src={`${process.env.REACT_APP_BASE_URL}${imageUrl}`}\r\n            alt=\"processed waveform\"\r\n            style={{ maxWidth: '100%', height: 'auto' }}\r\n          />\r\n\r\n        <label>MIX処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${mixFileUrl}`} controls/>\r\n        </label>\r\n\r\n        <div>\r\n          <h2>音量バランス調整</h2>\r\n\r\n            <label>inst音量: {instVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={instVolume}\r\n              onChange={(e) => setInstVolume(parseFloat(e.target.value))}\r\n            />\r\n\r\n            <label>ボーカル音量: {vocalVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={vocalVolume}\r\n              onChange={(e) => setVocalVolume(parseFloat(e.target.value))}\r\n            />\r\n        </div>\r\n\r\n        <div>\r\n          <h2>音ズレ確認・調整</h2>\r\n\r\n          <label>ボーカルのズレ調整（ミリ秒）: {offset}ms</label>\r\n          <input\r\n            type=\"range\"\r\n            min={-1000}\r\n            max={1000}\r\n            step={10}\r\n            value={offset}\r\n            onChange={(e) => setOffset(Number(e.target.value))}\r\n          />\r\n\r\n          <button onClick={handleConfirmVolumeAndOffset}>この音量,ズレで確定</button>\r\n        </div>\r\n\r\n        <label>再生位置（秒）: {playbackPosition}s</label>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={instDuration}\r\n          step=\"1\"\r\n          value={playbackPosition}\r\n          onChange={(e) => setPlaybackPosition(Number(e.target.value))}\r\n        />\r\n\r\n        <button onClick={handlePlay}>再生して確認</button>\r\n        <button onClick={stopPreviousPlayback}>再生停止</button>\r\n\r\n        <button onClick={handleUpload}>アップロード画面へ</button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ResultPage;\r\n  */","map":{"version":3,"names":["React","useRef","useLocation","useNavigate","useState","axios"],"sources":["C:/Users/mitos/Desktop/volume/frontend/src/components/ResultPage.js"],"sourcesContent":["import React, { useRef} from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useNavigate} from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n/* \r\nfunction ResultPage() {\r\n\r\n   const navigate = useNavigate()\r\n   const handleUpload = () => {\r\n        navigate('/')\r\n    }\r\n\r\n    const location = useLocation();\r\n    const previousFileUrl = location.state?.vocalPreviousFileUrl;\r\n    const fileUrl = location.state?.vocalFileUrl;\r\n    const imageUrl = location.state?.imageUrl;\r\n    const mixFileUrl = location.state?.mixFileUrl;\r\n    const instFileUrl = location.state?.instFileUrl;\r\n    const mixFilePath = location.state?.mixFilePath;\r\n    const vocalFilePath = location.state?.vocalFilePath;\r\n    const instFilePath = location.state?.instFilePath;\r\n\r\n\r\n    //試し聞きの際、前の再生を停止する\r\n    const stopPreviousPlayback = () => {\r\n      try {\r\n        instSourceRef.current?.stop();\r\n      } catch (e) {}\r\n      try {\r\n        vocalSourceRef.current?.stop();\r\n      } catch (e) {}\r\n    };\r\n\r\n    //音ズレ調整用の変数\r\n    const [offset, setOffset] = useState(0);\r\n    //ボリューム調整用の変数\r\n    const [vocalVolume, setVocalVolume] = useState(1.0);\r\n    const [instVolume, setInstVolume] = useState(1.0);\r\n\r\n    //重複再生を防ぐための変数\r\n    const instSourceRef = useRef(null);\r\n    const vocalSourceRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n\r\n    //再生位置管理の変数\r\n    const [playbackPosition, setPlaybackPosition] = useState(0); // 秒単位\r\n\r\n    //曲の長さを取得する変数\r\n    const [instDuration, setInstDuration] = useState(0);\r\n\r\n    //音ズレ調整用の処理\r\n    const handlePlay = async () => {\r\n      //前の再生を停止\r\n      stopPreviousPlayback(); \r\n\r\n      //AudioContext を再利用（なければ新しく作る）\r\n      const context = audioContextRef.current || new (window.AudioContext || window.webkitAudioContext)();\r\n      audioContextRef.current = context;\r\n\r\n      const fetchAndDecode = async (url) => {\r\n        const res = await fetch(url);\r\n        const arrayBuffer = await res.arrayBuffer();\r\n        return await context.decodeAudioData(arrayBuffer);\r\n      };\r\n\r\n      const instBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${instFileUrl}`);\r\n      const vocalBuffer = await fetchAndDecode(`${process.env.REACT_APP_BASE_URL}${fileUrl}`);\r\n\r\n      //曲の長さを取得\r\n      setInstDuration(instBuffer.duration);\r\n\r\n      //GainNode を使って音量調整\r\n      const instGainNode = context.createGain();\r\n      const vocalGainNode = context.createGain();\r\n      instGainNode.gain.value = instVolume*0.5;       // inst音量\r\n      vocalGainNode.gain.value = vocalVolume*0.5;     // ボーカル音量 なんでかわからないけど音がでかいから両方半分にしてる(相対的には変わってないから機能的には大丈夫だと思う)\r\n\r\n      //Source を useRef に保存し、GainNode 経由で接続\r\n      const instSource = context.createBufferSource();\r\n      instSource.buffer = instBuffer;\r\n      instSource.connect(instGainNode).connect(context.destination);\r\n      instSourceRef.current = instSource;\r\n\r\n      const vocalSource = context.createBufferSource();\r\n      vocalSource.buffer = vocalBuffer;\r\n      vocalSource.connect(vocalGainNode).connect(context.destination);\r\n      vocalSourceRef.current = vocalSource;\r\n\r\n\r\n      //offsetを反映して再生\r\n      const offsetSeconds = offset / 1000;\r\n      if (offsetSeconds >= 0) {\r\n        // offset が正 →  ボーカルのタイミングを遅らせる\r\n        const instStartTime = playbackPosition;\r\n        const vocalStartTime = playbackPosition;  \r\n\r\n        const now = context.currentTime;\r\n        instSource.start(now, instStartTime);\r\n        vocalSource.start(now + offsetSeconds, vocalStartTime);\r\n      } else {\r\n\r\n        // offset が負 → instのタイミングを遅らせる (ボーカルを前にずらさないのは再生位置を負の値にしないため)\r\n        const instStartTime = playbackPosition; \r\n        const vocalStartTime = playbackPosition;  \r\n       \r\n        const now = context.currentTime;\r\n        instSource.start(now + Math.abs(offsetSeconds), instStartTime);\r\n        vocalSource.start(now, vocalStartTime);\r\n      }\r\n\r\n    };\r\n\r\n     const formData = new FormData();\r\n     formData.append(\"output_inst_path\",instFilePath)\r\n     formData.append(\"output_vocal_path\",vocalFilePath)\r\n     formData.append(\"output_mix_path\",mixFilePath)\r\n     formData.append(\"offset_ms\", offset)\r\n     formData.append(\"vocal_gain\", vocalVolume)\r\n     formData.append(\"inst_gain\", instVolume)\r\n\r\n\r\n    const handleConfirmVolumeAndOffset = async () => {\r\n      try {\r\n        const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/apply_mix`, formData);\r\n        alert(\"音量バランスとオフセットが確定されました\");\r\n        window.location.reload();\r\n      } catch (error) {\r\n        alert(\"送信に失敗しました\");\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n\r\n\r\n    console.log(\"処理前:\", previousFileUrl)\r\n    console.log(\"処理後:\", fileUrl)\r\n    console.log(\"MIX:\", mixFileUrl)\r\n\r\n    return (\r\n      <div>\r\n        <h1>処理完了</h1>\r\n        <label>処理前\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${previousFileUrl}`} controls/>\r\n        </label>\r\n        <label>処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${fileUrl}`} controls/>   \r\n        </label>\r\n        \r\n          <img\r\n            src={`${process.env.REACT_APP_BASE_URL}${imageUrl}`}\r\n            alt=\"processed waveform\"\r\n            style={{ maxWidth: '100%', height: 'auto' }}\r\n          />\r\n\r\n        <label>MIX処理後\r\n          <audio src={`${process.env.REACT_APP_BASE_URL}${mixFileUrl}`} controls/>\r\n        </label>\r\n\r\n        <div>\r\n          <h2>音量バランス調整</h2>\r\n\r\n            <label>inst音量: {instVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={instVolume}\r\n              onChange={(e) => setInstVolume(parseFloat(e.target.value))}\r\n            />\r\n\r\n            <label>ボーカル音量: {vocalVolume.toFixed(2)}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"2\"\r\n              step=\"0.01\"\r\n              value={vocalVolume}\r\n              onChange={(e) => setVocalVolume(parseFloat(e.target.value))}\r\n            />\r\n        </div>\r\n\r\n        <div>\r\n          <h2>音ズレ確認・調整</h2>\r\n\r\n          <label>ボーカルのズレ調整（ミリ秒）: {offset}ms</label>\r\n          <input\r\n            type=\"range\"\r\n            min={-1000}\r\n            max={1000}\r\n            step={10}\r\n            value={offset}\r\n            onChange={(e) => setOffset(Number(e.target.value))}\r\n          />\r\n\r\n          <button onClick={handleConfirmVolumeAndOffset}>この音量,ズレで確定</button>\r\n        </div>\r\n\r\n        <label>再生位置（秒）: {playbackPosition}s</label>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={instDuration}\r\n          step=\"1\"\r\n          value={playbackPosition}\r\n          onChange={(e) => setPlaybackPosition(Number(e.target.value))}\r\n        />\r\n\r\n        <button onClick={handlePlay}>再生して確認</button>\r\n        <button onClick={stopPreviousPlayback}>再生停止</button>\r\n\r\n        <button onClick={handleUpload}>アップロード画面へ</button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ResultPage;\r\n  */"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAO,OAAO;AACpC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAO,kBAAkB;AAC7C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;;AAGzignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}